我们要动手制作一个镜像，这个镜像run起来后是个tomcat server，这个server支持maven插件在线部署war应用
步骤
   1. 在本地 新建一个 空的文件夹 tomcatImages
   2.  去tomcat官网下载tomcat安装包，解压后，将conf文件夹下的server.xml和tomcat-users.xml这两个文件复制到前面新建的image_tomcat目录下面
   3. 修改server.xml文件，如下，在port等于8080的Connector节点增加属性URIEncoding=”UTF-8”，如下
            <Connector port="8080" protocol="HTTP/1.1"
                       connectionTimeout="20000"
            redirectPort="8443" URIEncoding="UTF-8"/>
            这个改动的用处是将get请求中的参数做UTF-8编码，这样我们就能在浏览器的地址栏直接输入中文参数了

   4.修改tomcat-users.xml文件，在tomcat-users节点中增加内容
        <role rolename="manager-gui"/>
        <role rolename="manager-script"/>
        <user username="account001" password="password001" roles="manager-gui,manager-script"/>
        <!--有了这些配置，就能用account001账号在对应的tomcat上进行在线部署操作-->

   (tomcat8 需要额外添加一个文件)   创建一个 manager.xml
        <Context privileged="true" antiResourceLocking="false"
                 docBase="${catalina.home}/webapps/manager">
            <Valve className="org.apache.catalina.valves.RemoteAddrValve" allow="^.*$" />
        </Context>


   5.docker 镜像制作 需要编写 一个 Dockerfile 文件  名称就是 Dockerfile 不能进行修改 这个的docker 制作镜像的默认文件名
     我们在 tomcatImages 新建一个 Dockerfile 文件

     文件名: Dockerfile 没有后缀
     文件内容:
           # First docker file from bolingcavalry
           # VERSION 0.0.1
           # Author: Jackson_J
           #基础镜像
           FROM tomcat:8.5.37-jre8
           #作者
           MAINTAINER Jackson_J <1556837534@qq.com>
           #定义工作目录
           ENV WORK_PATH /usr/local/tomcat/conf
           #定义要替换的文件名
           ENV USER_CONF_FILE_NAME tomcat-users.xml
           #定义要替换的server.xml文件名
           ENV SERVER_CONF_FILE_NAME server.xml
           #定义要新增的manager.xml文件名 tomcat[8]
           ENV MANAGER_CONF_FILE_NAME manager.xml
           #删除原文件tomcat-users.xml
           RUN rm $WORK_PATH/$USER_CONF_FILE_NAME
           #复制文件tomcat-users.xml
           COPY ./$USER_CONF_FILE_NAME $WORK_PATH/
           #删除原文件server.xml
           RUN rm $WORK_PATH/$SERVER_CONF_FILE_NAME
           #复制文件server.xml
           COPY ./$SERVER_CONF_FILE_NAME $WORK_PATH/
           #复制文件manager.xml  [tomcat8 需要]
           COPY  ./$MANAGER_CONF_FILE_NAME $MANAGER_PATH/

     ①. FROM tomcat:8.5.37-jre8的意思是使用tomcat:8.5.37-jre8作为基础镜像，8.5.37-jre8是tag，
     ②. 使用了tomcat:8.5.37-jre8作为基础镜像后，通过RUN rm命令将原有的server.xml和tomcat-users.xml文件删除；
     ③. 将我们准备工作中准备的server.xml和tomcat-users.xml文件复制到原来的conf目录下，这样就用取代了原有的文件；

   6. 进入该目录 执行  docker build -t jacksontomcat:0.0.1 .
      ①  [root@Docker ~]# cd /opt/tomcatImages/
      ②  [root@Docker tomcatImages]# docker build -t jacksontomcat:0.0.1 .
                Step 9/9 : COPY ./$SERVER_CONF_FILE_NAME $WORK_PATH/
                 ---> 7321ecab0bb1
                Removing intermediate container c044b2472df5
                Successfully built 7321ecab0bb1  -- 成功

      ③   执行完毕后，输入docker images可以查看当前本机的镜像
            [root@Docker tomcatImages]# docker images
            REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE

            docker.io/tomcat     8.5.37-jre8         1a51cb5e3006        12 days ago         462 MB


      ④   启动tomcat 镜像
           docker run --name=tomcat001 -p 8080:8080 -e TOMCAT_SERVER_ID=tomcat_server_001 -idt jacksontomcat:0.0.1

            > -e TOMCAT_SERVER_ID=tomcat_server_001的意思是在容器中设置了环境变量TOMCAT_SERVER_ID，值是tomcat_server_001
           查看 是否启动
              docker ps
              [root@Docker tomcatImages]# docker ps
              CONTAINER ID        IMAGE                 COMMAND             CREATED             STATUS              PORTS                    NAMES
              76088b76964d        jacksontomcat:0.0.1   "catalina.sh run"   37 seconds ago      Up 36 seconds       0.0.0.0:8080->8080/tcp   tomcat001


           之后 访问 ip:port 可以看到熟悉的tomcat界面

   7. 如何使用 Maven 进行在线部署
        在pom.xml文件中 新增
        <plugins>
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <url>http://192.168.47.128:8080/manager/text</url>
                    <server>tomcat7</server>
                    <!--这个账号密码 是tomcat tomcat-users.xml 配置的账号 -->
                    <username>account001</username>
                    <password>password001</password>
                    <update>true</update>
                    <path>/${project.artifactId}</path>
                    <update>true</update>
                </configuration>
            </plugin>
        </plugins>

   8. 回到本项目  用命令行进入pom.xml文件所在的目录，执行命令
          mvn clean package -U -Dmaven.test.skip=true tomcat7:redeploy
       或者 在 ide 编辑器中 执行deploy 在 deploy 的命令行中添加
       clean package -U -Dmaven.test.skip=true tomcat7:redeploy

   9. 浏览器中直接访问 该项目中的 /hello?name=张三 请求 可以看到已经部署成功
